//main.cpp

#include "points.h"
#include <iostream>
using namespace std;

int main() {
    Point* Points = nullptr;
    int pointCount = 0;
    double R = 0;
    Point point;

    point.readFromFile("points.txt", Points, pointCount, R);

    int filteredCount = point.filter(Points, pointCount, R);

    int index1, index2;
    double maxDistance;
    point.findFurthestPoints(Points, filteredCount, index1, index2, maxDistance);

    cout << "Points in R-neighborhood (R = " << R << "): " << filteredCount << std::endl;
    for (int i = 0; i < filteredCount; i++) {
        Points[i].show();
    }

    if (filteredCount >= 2) {
        cout << "Two furthest points: " << index1 << " and " << index2 << endl;
        cout << "Distance between them: " << maxDistance << endl;
    }
    else {
        cout << "Not enough points in R-neighborhood to find a pair." << endl;
    }

    delete[] Points;

    return 0;
}


//point.h

#ifndef POINTS_H
#define POINTS_H

#include <fstream>
#include <string>
#include <cmath>

class Point {
private:
    int number;
    double x, y, z;

public:
    Point();
    Point(int num, double x_val, double y_val, double z_val);

    double distanceToOrigin() const;
    double distanceTo(const Point& other) const;

    void readFromFile(const std::string& filename, Point*& points, int& count, double& R);
    void show() const;

    int filter(Point* arr, int lenarray, double R) const;
    void findFurthestPoints(const Point* points, int size, int& index1, int& index2, double& maxDist) const;
};

#endif


//points.cpp

#include "points.h"
#include <sstream>
#include <iostream>
#include <limits>

Point::Point() : number(0), x(0), y(0), z(0) {}

Point::Point(int num, double xx, double yy, double zz)
    : number(num), x(xx), y(yy), z(zz) {}

double Point::distanceToOrigin() const {
    return sqrt(x * x + y * y + z * z);
}

double Point::distanceTo(const Point& other) const {
    double dx = x - other.x;
    double dy = y - other.y;
    double dz = z - other.z;
    return sqrt(dx * dx + dy * dy + dz * dz);
}

void Point::readFromFile(const std::string& filename, Point*& points, int& count, double& R) {
    std::ifstream file(filename);
    if (!file.is_open()) {
        std::cout << "Error opening file: " << filename << std::endl;
        return;
    }

    file.ignore(std::numeric_limits<std::streamsize>::max(), '=');
    file >> R;
    file.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

    std::string header;
    std::getline(file, header);

    count = 0;
    std::string line;
    while (std::getline(file, line)) {
        if (!line.empty()) {
            count++;
        }
    }

    file.clear();
    file.seekg(0);
    file.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
    std::getline(file, header);

    points = new Point[count];
    int num;
    double x, y, z;
    for (int i = 0; i < count && file >> num >> x >> y >> z; i++) {
        points[i] = Point(num, x, y, z);
    }

    file.close();
}

void Point::show() const {
    std::cout << number << "\t" << x << "\t" << y << "\t" << z << std::endl;
}

int Point::filter(Point* arr, int lenarray, double R) const {
    int newSize = 0;
    for (int i = 0; i < lenarray; i++) {
        if (arr[i].distanceToOrigin() <= R) {
            arr[newSize] = arr[i];
            newSize++;
        }
    }
    return newSize;
}

void Point::findFurthestPoints(const Point* points, int size, int& num1, int& num2, double& maxDist) const {
    maxDist = 0;
    num1 = -1;
    num2 = -1;

    for (int i = 0; i < size; i++) {
        for (int j = i + 1; j < size; j++) {
            double dist = points[i].distanceTo(points[j]);
            if (dist > maxDist) {
                maxDist = dist;
                num1 = points[i].number;
                num2 = points[j].number;
            }
        }
    }
}
