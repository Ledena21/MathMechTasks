#include <iostream>

using namespace std;

//класс для представления выражения вида Q(x) = a0 + a1/x + a2/x^2 + ... + an/x^n
class QExpression {
private:
    double* coeffs; //указатель на динамический массив коэффициентов (a0, a1, ..., an)
    int n;         //количество коэффициентов (равно максимальной степени + 1)

public:
    //конструктор класса
    //принимает размер массива коэффициентов
    QExpression(int size) : n(size) {
        coeffs = new double[n]; //выделяем памяти под массив коэффициентов
        for (int i = 0; i < n; i++) coeffs[i] = 0; //инициализируем все коэффициенты нулями
    }

    //конструктор копирования
    QExpression(const QExpression& other) : n(other.n) {
        coeffs = new double[n]; //выделяем новую память
        for (int i = 0; i < n; i++) {
            coeffs[i] = other.coeffs[i]; //поэлементно копируем коэффициенты
        }
    }

    //деструктор класса
    ~QExpression() {
        delete[] coeffs;
    }

    void input() {
        cout << "Enter " << n << " coefficients (from a0 to a" << n - 1 << "): ";
        for (int i = 0; i < n; i++) {
            cin >> coeffs[i]; //ввод каждого коэффициента
        }
    }

    //метод для вычисления значения выражения в точке x
    double calc(double x) {
        double res = 0; //результат
        double x_pow = 1; // x^0 = 1 (начальное значение степени x)

        for (int i = 0; i < n; i++) {
            res += coeffs[i] / x_pow;//добавляем очередной член ряда
            x_pow *= x;//увеличение степени x 
        }
        return res;
    }

    // Перегрузка оператора сложения (+) для двух QExpression
    QExpression operator+(const QExpression& other) {
        //определяем максимальный размер из двух выражений
        int max_n = n > other.n ? n : other.n;
        QExpression res(max_n); //создаем результат максимального размера
        //поэлементно складываем коэффициенты
        for (int i = 0; i < max_n; i++) {
            //если коэффициент отсутствует в одном из выражений, считаем его равным 0
            double a = i < n ? coeffs[i] : 0;
            double b = i < other.n ? other.coeffs[i] : 0;
            res.coeffs[i] = a + b;
        }
        return res;
    }

    // Перегрузка оператора вычитания (-) аналогична сложению
    QExpression operator-(const QExpression& other) {
        int max_n = n > other.n ? n : other.n;
        QExpression res(max_n);

        for (int i = 0; i < max_n; i++) {
            double a = i < n ? coeffs[i] : 0;
            double b = i < other.n ? other.coeffs[i] : 0;
            res.coeffs[i] = a - b;
        }
        return res;
    }

    //перегрузка оператора умножения (*) на число
    QExpression operator*(double num) {
        QExpression res(n); //создаем результат того же размера
        for (int i = 0; i < n; i++)
            res.coeffs[i] = coeffs[i] * num; //умножаем каждый коэффициент на число
        return res;
    }

    //перегрузка оператора деления (/) на число
    QExpression operator/(double num) {
        if (num == 0) {
            cerr << "Error: Division by zero!" << endl; //проверка деления на ноль
            return *this; //в случае ошибки возвращаем исходный объект
        }
        QExpression res(n); //создаем результат того же размера
        for (int i = 0; i < n; i++)
            res.coeffs[i] = coeffs[i] / num; //делим каждый коэффициент на число
        return res;
    }

    void show() {
        cout << "Q(x) = ";
        for (int i = 0; i < n; i++) {
            if (i == 0)
                cout << coeffs[i]; //первый член без x
            else
                cout << " + " << coeffs[i] << "/x^" << i; //остальные члены с x в степени
        }
        cout << endl;
    }
};

int main() {
    int N;
    cout << "Enter max deg N: ";
    cin >> N; //ввод максимальной степени
    N++;      //увеличиваем на 1, так как есть еще a0

    //создаем два выражения
    QExpression q1(N), q2(N);

    //ввод коэффициентов для первого выражения
    cout << "For 1 expression:\n";
    q1.input();

    //ввод коэффициентов для второго выражения
    cout << "For 2 expression:\n";
    q2.input();

    //что ввели, то выведем
    cout << "\nExpression 1: "; q1.show();
    cout << "Expression 2: "; q2.show();

    //сложение
    QExpression q3 = q1 + q2;
    cout << "Sum: "; q3.show();

    //вычитание
    QExpression q4 = q1 - q2;
    cout << "Difference: "; q4.show();

    //умножение
    double mult_num;
    cout << "\nEnter number for multiplication: ";
    cin >> mult_num;
    QExpression q5 = q1 * mult_num;
    cout << "Multiplication by " << mult_num << ": "; q5.show();

    //деление
    double div_num;
    cout << "Enter number for division: ";
    cin >> div_num;
    QExpression q6 = q2 / div_num;
    cout << "Division by " << div_num << ": "; q6.show();

    //значение первого выражения в точке x
    double x;
    cout << "\nEnter x to calculate Q1(x): ";
    cin >> x;
    cout << "Q1(" << x << ") = " << q1.calc(x) << endl;

    return 0;
}
