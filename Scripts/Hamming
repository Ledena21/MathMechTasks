function builtMatrix(ks){
    let matrix = [];
    mxlen = ((ks.length).toString(2)).length;
    for (let i = 1 ; i < ks.length+1; i++){
        if ((i.toString(2)).length < mxlen){
          matrix.push("0".repeat(mxlen - i.toString(2).length) + i.toString(2));
        } else {
          matrix.push(i.toString(2));
        }
    }
    return matrix;
}

function HammingEncode(s){
    let ks = "";
    let i =0

    while(s.length > 0) {
        if (ks.length + 1 === 2**i) {
            ks += "*";
            i++;
        } else {
            ks += s[0];
            s = s.slice(1);
        }
    }

    matrix = builtMatrix(ks);

    p = [];
    for (let j = 0; j < mxlen; j++) {
        let pp = 0;
        for (let i = 0; i < ks.length; i++) {
            if (matrix[i][j] === '1' && ks[i] === '1') {
            pp += 1;
            }
        }
        p.unshift(pp%2);
    }

    let ksArray = ks.split('');
    for (let i = 0; i < ksArray.length; i++) {
        if (ksArray[i] == "*" && p.length > 0) {
            ksArray[i] = p.shift();
        }
    }
    ks = ksArray.join('');

    return ks;
}

function HammingDecode(s) {
    let sArr = s.split('');
    let mist = Mistakes(s);
    if (typeof mist === "number" && mist!=0){
        console.log("Ошибка в бите на позиции", mist);
        if (sArr[mist - 1] === "1"){
            sArr[mist - 1] = "0";
        } else {
            sArr[mist - 1] = "1";
        }
    } else {
        console.log("Нет ошибок")
    }
    s = sArr.join('');
    
    let decstr = '';
    for (let i = 0, j = 0; i < s.length; i++) {
        if (i + 1 === 2**j) {
            j++;
        } else {
            decstr += s[i];
        }
    }  
    return decstr;
}

function Mistakes(s) {
    let matrix = builtMatrix(s);
    let mxlen = matrix[0].length;

    let m = [];
    for (let j = mxlen - 1; j >= 0; j--) {
        let mm = 0;
        for (let i = 0; i < s.length; i++) {
            mm += parseInt(matrix[i][j]) * parseInt(s[i]);
        }
        m.unshift(mm % 2);
    }
    return parseInt(m.join(''), 2);
}


let args = process.argv.slice(2);
let s = args[1];
//"1011";

switch (args[0]) {
    case "-h":
    case "--help":
        console.log("This program encodes or decodes files using Hamming encoding.");
        console.log("To use, write node humming.js [encoding or decoding] [string]");
        break;
    case "-e":
    case "--encode":
        console.log(HammingEncode(s));
        break;
    case "-d":
    case "--decode":
        //console.log(Mistakes(s));
        console.log(HammingDecode(s));
        break;
    default:
        console.log("Ошибка: неизвестная опция");
        break;
}
